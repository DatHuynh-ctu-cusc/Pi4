import socket
import threading
from motor_control import move_vehicle, stop_all
import time
import shared_state  # Bi·∫øn chia s·∫ª tr·∫°ng th√°i t·ª± h√†nh v√† tr√°nh va

def start_receiver(shared_counts):
    def run():
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server.bind(('', 9999))
        server.listen(1)
        print("[Pi4] üü¢ Ch·ªù Pi5 g·ª≠i encoder + limit switch...")

        already_stopped_due_to_no_scan = False  # <-- th√™m bi·∫øn n√†y ·ªü ƒë√¢y

        while True:
            conn, addr = server.accept()
            print(f"[Pi4] ‚úÖ K·∫øt n·ªëi Pi5: {addr}")
            buffer = ""

            try:
                while True:
                    chunk = conn.recv(1024).decode()
                    if not chunk:
                        break
                    buffer += chunk

                    while '\n' in buffer:
                        line, buffer = buffer.split('\n', 1)
                        line = line.strip()
                        if not line:
                            continue

                        # === Nh·∫≠n ENCODER ===
                        if "ENC{" in line:
                            enc_block = line.split("ENC{")[1].split("}")[0]
                            enc_data = {
                                kv.split(':')[0]: int(kv.split(':')[1])
                                for kv in enc_block.split(';') if ':' in kv
                            }
                            shared_counts.update(enc_data)
                            print(f"[ENCODER] {shared_counts}")

                        # === Nh·∫≠n LIMIT SWITCH ===
                        if "LIMITS{" in line:
                            sw_block = line.split("LIMITS{")[1].split("}")[0]
                            sw_data = {
                                kv.split(':')[0]: int(kv.split(':')[1])
                                for kv in sw_block.split(';') if ':' in kv
                            }
                            print(f"[LIMIT] {sw_data}")

                            # L·∫•y tr·∫°ng th√°i t·ª´ng c√¥ng t·∫Øc
                            l1 = sw_data.get('L1', 0)
                            l2 = sw_data.get('L2', 0)
                            l3 = sw_data.get('L3', 0)
                            l4 = sw_data.get('L4', 0)

                            # --- NgƒÉn routine tr√°nh v·∫≠t khi ch∆∞a start_scan, tr√°nh rung/nh√≠t ---
                            if not shared_state.running_scan:
                                if any([l1, l2, l3, l4]):
                                    if not already_stopped_due_to_no_scan:
                                        print("[LIMIT] üö´ C√¥ng t·∫Øc b·ªã nh·∫•n nh∆∞ng ch∆∞a start_scan => STOP motor!")
                                        stop_all()
                                        already_stopped_due_to_no_scan = True
                                else:
                                    already_stopped_due_to_no_scan = False
                                continue  # B·ªè qua routine tr√°nh v·∫≠t khi ch∆∞a start_scan

                            # ‚ùó Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p d·ª´ng kh·∫©n c·∫•p
                            dangerous_combination = (
                                (l1 and l3) or
                                (l2 and l3) or
                                (l1 and l4) or
                                (l2 and l4) or
                                (l1 and l2 and l3 and l4)
                            )
                            if dangerous_combination:
                                print("[‚ùå] ‚ö†Ô∏è Va ch·∫°m ƒë·ªëi ngh·ªãch ho·∫∑c to√†n b·ªô ‚Äì D·ª™NG KH·∫®N C·∫§P")
                                stop_all()
                                shared_state.limit_active = True
                                continue

                            # N·∫øu c√≥ b·∫•t k·ª≥ c√¥ng t·∫Øc n√†o ƒë∆∞·ª£c nh·∫•n
                            if any([l1, l2, l3, l4]):
                                if not shared_state.limit_active:
                                    shared_state.limit_active = True
                                    print("[‚ö†Ô∏è] C√¥ng t·∫Øc va ch·∫°m ƒë∆∞·ª£c nh·∫•n ‚Äì D·ª™NG v√† CH·ªú 1 GI√ÇY...")
                                    stop_all()
                                    time.sleep(1.0)

                                    # Ki·ªÉm tra l·∫°i sau 1 gi√¢y
                                    if not any([l1, l2, l3, l4]):
                                        print("[‚úîÔ∏è] C√¥ng t·∫Øc ƒë√£ nh·∫£ sau 1s ‚Äì Kh√¥ng c·∫ßn x·ª≠ l√Ω")
                                        shared_state.limit_active = False
                                        continue

                                    # === X·ª≠ l√Ω h√†nh vi tr√°nh ===
                                    if l1 or l2:
                                        print("[‚ö†Ô∏è] L1/L2 gi·ªØ ‚Äì Ti·∫øn 1s ‚Üí Xoay ph·∫£i 1s")
                                        move_vehicle("forward", 0.1, 1.0, shared_counts)
                                        time.sleep(0.2)
                                        move_vehicle("right", 0.1, 1.0, shared_counts)
                                        shared_state.limit_active = False

                                    elif l3 or l4:
                                        print("[‚ö†Ô∏è] L3/L4 gi·ªØ ‚Äì L√πi 1s v√† ch·ªù x·ª≠ l√Ω LiDAR ƒë·ªÉ xoay")
                                        move_vehicle("backward", 0.1, 1.0, shared_counts)
                                        shared_state.escape_required = True  # autonomous_node s·∫Ω x·ª≠ l√Ω

                            else:
                                # N·∫øu c√¥ng t·∫Øc ƒë∆∞·ª£c nh·∫£ v√† kh√¥ng c√≤n ch·ªù escape
                                if shared_state.limit_active and not shared_state.escape_required:
                                    print("[‚úîÔ∏è] C√¥ng t·∫Øc ƒë√£ nh·∫£ ‚Äì Cho ph√©p t·ª± h√†nh l·∫°i")
                                    shared_state.limit_active = False

            except Exception as e:
                print(f"[ERROR] L·ªói nh·∫≠n Pi5: {e}")
            finally:
                conn.close()
                print("[Pi4] üîå M·∫•t k·∫øt n·ªëi Pi5 ‚Äì Ch·ªù k·∫øt n·ªëi l·∫°i...")

    threading.Thread(target=run, daemon=True).start()
