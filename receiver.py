import socket
import threading
from motor_control import move_vehicle
import time

# Bi·∫øn to√†n c·ª•c: Pi4 d√πng ƒë·ªÉ d·ª´ng t·ª± h√†nh khi c√¥ng t·∫Øc ƒë∆∞·ª£c nh·∫•n
limit_active = False

def start_receiver(shared_counts):
    def run():
        global limit_active
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server.bind(('', 9999))
        server.listen(1)
        print("[Pi4] üü¢ Ch·ªù Pi5 g·ª≠i encoder + limit switch...")

        while True:
            conn, addr = server.accept()
            print(f"[Pi4] ‚úÖ K·∫øt n·ªëi Pi5: {addr}")
            buffer = ""

            try:
                while True:
                    chunk = conn.recv(1024).decode()
                    if not chunk:
                        break
                    buffer += chunk

                    while '\n' in buffer:
                        line, buffer = buffer.split('\n', 1)
                        line = line.strip()
                        if not line:
                            continue

                        # === Nh·∫≠n ENCODER ===
                        if "ENC{" in line:
                            enc_block = line.split("ENC{")[1].split("}")[0]
                            enc_data = {
                                kv.split(':')[0]: int(kv.split(':')[1])
                                for kv in enc_block.split(';') if ':' in kv
                            }
                            shared_counts.update(enc_data)
                            print(f"[ENCODER] {shared_counts}")

                        # === Nh·∫≠n LIMIT SWITCH ===
                        if "LIMITS{" in line:
                            sw_block = line.split("LIMITS{")[1].split("}")[0]
                            sw_data = {
                                kv.split(':')[0]: int(kv.split(':')[1])
                                for kv in sw_block.split(';') if ':' in kv
                            }
                            print(f"[LIMIT] {sw_data}")

                            # N·∫øu c√≥ b·∫•t k·ª≥ c√¥ng t·∫Øc n√†o ƒë∆∞·ª£c nh·∫•n
                            if sw_data.get('L1') or sw_data.get('L2'):
                                if not limit_active:
                                    limit_active = True
                                    print("[‚ö†Ô∏è] L1/L2 ƒë∆∞·ª£c nh·∫•n ‚Äì Ti·∫øn 1s ‚Üí Xoay ph·∫£i 1s")
                                    move_vehicle("forward", 0.1, 1.0, shared_counts)
                                    time.sleep(0.2)
                                    move_vehicle("right", 0.1, 1.0, shared_counts)

                            elif sw_data.get('L3') or sw_data.get('L4'):
                                if not limit_active:
                                    limit_active = True
                                    print("[‚ö†Ô∏è] L3/L4 ƒë∆∞·ª£c nh·∫•n ‚Äì L√πi 1s ‚Üí Xoay tr√°i 1s")
                                    move_vehicle("backward", 0.1, 1.0, shared_counts)
                                    time.sleep(0.2)
                                    move_vehicle("left", 0.1, 1.0, shared_counts)

                            else:
                                if limit_active:
                                    print("[‚úîÔ∏è] C√¥ng t·∫Øc ƒë√£ nh·∫£ ‚Äì Cho ph√©p t·ª± h√†nh l·∫°i")
                                limit_active = False

            except Exception as e:
                print(f"[ERROR] L·ªói nh·∫≠n Pi5: {e}")
            finally:
                conn.close()
                print("[Pi4] üîå M·∫•t k·∫øt n·ªëi Pi5 ‚Äì Ch·ªù k·∫øt n·ªëi l·∫°i...")

    threading.Thread(target=run, daemon=True).start()
